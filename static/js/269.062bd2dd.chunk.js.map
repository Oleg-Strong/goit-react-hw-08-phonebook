{"version":3,"file":"static/js/269.062bd2dd.chunk.js","mappings":"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","sources":["redux/contacts/selectors.js","hooks/useContacts.js","components/ContactForm/ContactForm.jsx","utils/utils.js","components/Natification/Natification.jsx","components/MainModal/MainMdal.styled.jsx","components/MainModal/MainModal.jsx","components/UpdateContactForm/UpdateContactForm.jsx","components/ContectItem/ContectItem.jsx","components/ContactList/ContactList.jsx","components/Filter/Filter.jsx","pages/Contacts.jsx"],"sourcesContent":["export const selectFilter = state => state.filter;\n\nexport const selectContacts = state => state.contacts.items;\n\nexport const selectIsLoading = state => state.contacts.isLoading;\n\nexport const selectError = state => state.contacts.error;\n","import { useSelector } from 'react-redux';\nimport {\n  selectFilter,\n  selectContacts,\n  selectIsLoading,\n  selectError,\n} from 'redux/contacts/selectors';\n\nexport const useContacts = () => {\n  const filter = useSelector(selectFilter);\n  const contacts = useSelector(selectContacts);\n  const isLoading = useSelector(selectIsLoading);\n  const error = useSelector(selectError);\n  return {\n    filter,\n    contacts,\n    isLoading,\n    error,\n  };\n};\n","import { Formik, ErrorMessage, Form, Field } from 'formik';\nimport * as yup from 'yup';\nimport 'yup-phone';\nimport { checkContactBeforeAdding } from 'utils/utils';\nimport { useDispatch } from 'react-redux';\nimport { addContact } from 'redux/contacts/operation';\nimport { useContacts } from 'hooks/useContacts';\nimport { Box, Button, TextField } from '@mui/material';\n\nconst ContactForm = () => {\n  let scima = yup.object().shape({\n    name: yup\n      .string()\n      .min(3, 'please enter a name of at least 3 characters')\n      .max(25, 'name cannot be more than 25 characters')\n      .matches(\n        /^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$/,\n        'name is not valid'\n      )\n      .required('name field is required'),\n    number: yup\n      .string()\n      .required('number field is required')\n      .phone('UA', true, 'enter the number in the format (***)-***-**-**'),\n  });\n  const initialValues = {\n    name: '',\n    number: '',\n  };\n  const { contacts } = useContacts();\n  const dispatch = useDispatch();\n  const handleSubmit = (values, { resetForm }) => {\n    const checkedContact = checkContactBeforeAdding(contacts, values);\n    if (checkedContact) {\n      dispatch(addContact(checkedContact));\n    }\n    resetForm();\n  };\n\n  return (\n    <Box\n      p={2}\n      sx={{\n        width: '100%',\n      }}\n    >\n      <Formik\n        initialValues={initialValues}\n        validationSchema={scima}\n        onSubmit={handleSubmit}\n      >\n        {props => {\n          return (\n            <Form>\n              <Box\n                sx={{\n                  display: 'flex',\n                  alignItems: 'center',\n                  flexDirection: 'column',\n                }}\n              >\n                <Field\n                  as={TextField}\n                  id=\"standard-error-helper-text\"\n                  variant=\"filled\"\n                  label=\"Name\"\n                  type=\"text\"\n                  name=\"name\"\n                  color=\"primary\"\n                  fullWidth\n                  helperText={<ErrorMessage name=\"name\" />}\n                  error={props.errors.name && props.touched.name}\n                />\n                <Field\n                  as={TextField}\n                  id=\"standard-error-helper-text\"\n                  variant=\"filled\"\n                  label=\"Number\"\n                  type=\"tel\"\n                  name=\"number\"\n                  color=\"primary\"\n                  fullWidth\n                  helperText={<ErrorMessage name=\"number\" />}\n                  error={props.errors.number && props.touched.number}\n                  margin=\"normal\"\n                />\n                <Button variant=\"contained\" type=\"submit\">\n                  Add contact\n                </Button>\n              </Box>\n            </Form>\n          );\n        }}\n      </Formik>\n    </Box>\n  );\n};\n\nexport default ContactForm;\n","import notify from './alerts';\n\nexport const getFilteredContacts = (name, contacts) => {\n  const normalizedName = name.toLowerCase();\n  return contacts\n    .filter(contact => contact.name.toLowerCase().includes(normalizedName))\n    .sort((firstContact, secondContact) =>\n      firstContact.name.localeCompare(secondContact.name)\n    );\n};\n\nexport const checkContactBeforeAdding = (contacts, addedContact) => {\n  const { name, number } = addedContact;\n  const normalazetName = name.toLowerCase().split(' ').join('');\n  const normalazetNumber = number.split('-').join('');\n  const existingName = contacts.some(\n    ({ name }) => name.toLowerCase().split(' ').join('') === normalazetName\n  );\n  const existingNumber = contacts.some(\n    ({ number }) => number.split('-').join('') === normalazetNumber\n  );\n  if (existingName || existingNumber) {\n    notify(\n      'warning',\n      `${existingNumber ? number : name} is already in contacts!!!`\n    );\n\n    return;\n  }\n\n  return addedContact;\n};\n","import PropTypes from 'prop-types';\nimport { Typography } from '@mui/material';\n\nconst Natification = ({ title }) => {\n  return title ? (\n    <Typography variant=\"h3\">\n      Contact with the name\n      <Typography variant=\"subtitle3\"> \"{title}\" </Typography>not found.\n    </Typography>\n  ) : (\n    <Typography variant=\"h3\">\n      There are no contacts in the phone book yet!\n    </Typography>\n  );\n};\nexport default Natification;\n\nNatification.prototype = {\n  title: PropTypes.string.isRequired,\n};\n","import styled from '@emotion/styled';\n\nexport const Overlay = styled.div`\n  position: fixed;\n  top: 0;\n  left: 0;\n  width: 100vw;\n  height: 100vh;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  background-color: rgba(0, 0, 0, 0.8);\n  z-index: 1200;\n`;\n\nexport const Modal = styled.div`\n  max-width: calc(100vw - 48px);\n  max-height: calc(100vh - 24px);\n`;\n","import { createPortal } from 'react-dom';\nimport React, { useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport { Overlay, Modal } from './MainMdal.styled';\n\nconst modalRoot = document.querySelector('#modal-root');\n\nconst MainModal = ({ closeModal, children }) => {\n  useEffect(() => {\n    window.addEventListener('keydown', handleKeydown);\n    return () => window.removeEventListener('keydown', handleKeydown);\n  });\n\n  const handleKeydown = e => {\n    if (e.code === 'Escape') {\n      closeModal();\n    }\n  };\n\n  const onBackdropClick = e => {\n    if (e.target === e.currentTarget) {\n      closeModal();\n    }\n  };\n\n  return createPortal(\n    <Overlay onClick={onBackdropClick}>\n      <Modal>{children}</Modal>\n    </Overlay>,\n    modalRoot\n  );\n};\n\nexport default MainModal;\n\nMainModal.propTypes = {\n  children: PropTypes.node,\n  closeModal: PropTypes.func.isRequired,\n};\n","import { Formik, Form, ErrorMessage, Field } from 'formik';\nimport * as yup from 'yup';\nimport 'yup-phone';\n\nimport { useDispatch } from 'react-redux';\nimport { Box, Button, TextField, Typography } from '@mui/material';\nimport { fetchContacts, updateContact } from 'redux/contacts/operation';\nimport { theme } from 'theme/theme';\n\nconst UpdateContactForm = ({ contactValues, closeModal }) => {\n  const { id, name, number } = contactValues;\n  let scima = yup.object().shape({\n    name: yup\n      .string()\n      .min(3, 'please enter a name of at least 3 characters')\n      .max(25, 'name cannot be more than 25 characters')\n      .matches(\n        /^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$/,\n        'name is not valid'\n      )\n      .required('name field is required'),\n    number: yup\n      .string()\n      .required('number field is required')\n      .phone('UA', true, 'enter the number in the format (***)-***-**-**'),\n  });\n  const initialValues = {\n    name: name,\n    number: number,\n  };\n\n  const dispatch = useDispatch();\n  const handleSubmit = (values, { resetForm }) => {\n    dispatch(updateContact({ id, values }));\n    resetForm();\n    closeModal();\n    dispatch(fetchContacts());\n  };\n\n  return (\n    <Box\n      p={6}\n      sx={{\n        backgroundColor: `${theme.palette.background.header}`,\n        borderRadius: '5px',\n      }}\n    >\n      <Formik\n        initialValues={initialValues}\n        validationSchema={scima}\n        onSubmit={handleSubmit}\n      >\n        {props => {\n          return (\n            <Form>\n              <Box\n                sx={{\n                  display: 'flex',\n                  alignItems: 'center',\n                  flexDirection: 'column',\n                }}\n              >\n                <Typography variant=\"h2\" color={theme.palette.primary.second}>\n                  Update Contact\n                </Typography>\n                <Field\n                  as={TextField}\n                  id=\"standard-error-helper-text\"\n                  variant=\"standard\"\n                  label=\"Name\"\n                  type=\"text\"\n                  name=\"name\"\n                  color=\"primary\"\n                  fullWidth\n                  helperText={<ErrorMessage name=\"name\" />}\n                  error={props.errors.name && props.touched.name}\n                  margin=\"normal\"\n                />\n                <Field\n                  as={TextField}\n                  id=\"standard-error-helper-text\"\n                  variant=\"standard\"\n                  label=\"Number\"\n                  type=\"tel\"\n                  name=\"number\"\n                  color=\"primary\"\n                  fullWidth\n                  helperText={<ErrorMessage name=\"number\" />}\n                  error={props.errors.number && props.touched.number}\n                  margin=\"normal\"\n                />\n                <Button variant=\"contained\" type=\"submit\">\n                  Update\n                </Button>\n              </Box>\n            </Form>\n          );\n        }}\n      </Formik>\n    </Box>\n  );\n};\n\nexport default UpdateContactForm;\n","import { useDispatch } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport { deleteContact } from 'redux/contacts/operation';\nimport { useState } from 'react';\nimport MainModal from 'components/MainModal/MainModal';\nimport UpdateContactForm from 'components/UpdateContactForm';\nimport { Box, IconButton, Paper, Tooltip, Typography } from '@mui/material';\nimport ModeEditOutlineIcon from '@mui/icons-material/ModeEditOutline';\nimport RestoreFromTrashIcon from '@mui/icons-material/RestoreFromTrash';\n\nimport { theme } from 'theme/theme';\n\nconst ContactItem = ({ contact }) => {\n  const { id, name, number } = contact;\n  const [isModalOpen, setIsModalOpen] = useState(false);\n  const toggleModal = () => {\n    setIsModalOpen(prevIsModalOpen => !prevIsModalOpen);\n  };\n  const dispatch = useDispatch();\n  const onDelete = () => dispatch(deleteContact(id));\n  return (\n    <Paper\n      sx={{\n        display: 'flex',\n        justifyContent: ' space-between',\n        alignItems: 'center',\n        padding: '10px',\n        width: '100%',\n        borderRadius: '10px',\n        backgroundColor: `${theme.palette.background.basic}`,\n      }}\n    >\n      <Box\n        sx={{\n          display: 'flex',\n          alignItems: 'center',\n          flexDirection: { xs: 'column', sm: 'row' },\n          gap: { sm: '20px' },\n        }}\n      >\n        <Typography\n          variant=\"subtitle2\"\n          color={theme.palette.primary.second}\n          sx={{\n            fontSize: { xs: '20px', md: '30px', xl: '35px' },\n          }}\n        >\n          {name}:\n        </Typography>\n        <Tooltip title=\"Call\">\n          <a href={`tel:+38${number}`}>\n            <Typography\n              variant=\"subtitle2\"\n              color={theme.palette.primary.third}\n              sx={{\n                fontSize: { xs: '20px', md: '30px', xl: '35px' },\n              }}\n            >\n              {number}\n            </Typography>\n          </a>\n        </Tooltip>\n      </Box>\n      <Box\n        sx={{\n          display: 'flex',\n          gap: '5px',\n        }}\n      >\n        <Tooltip title=\"Delete\">\n          <IconButton onClick={onDelete}>\n            <RestoreFromTrashIcon />\n          </IconButton>\n        </Tooltip>\n        <Tooltip title=\"Edit\">\n          <IconButton onClick={toggleModal}>\n            <ModeEditOutlineIcon />\n          </IconButton>\n        </Tooltip>\n      </Box>\n\n      {isModalOpen && (\n        <MainModal closeModal={toggleModal}>\n          <UpdateContactForm closeModal={toggleModal} contactValues={contact} />\n        </MainModal>\n      )}\n    </Paper>\n  );\n};\nexport default ContactItem;\n\nContactItem.prototype = {\n  phonebook: PropTypes.arrayOf(\n    PropTypes.shape({\n      name: PropTypes.string.isRequired,\n      id: PropTypes.string.isRequired,\n      number: PropTypes.string.isRequired,\n    })\n  ).isRequired,\n};\n","import Natification from 'components/Natification';\nimport ContactItem from 'components/ContectItem';\n\nimport { getFilteredContacts } from 'utils/utils';\nimport { useContacts } from 'hooks/useContacts';\nimport { Scrollbars } from 'react-custom-scrollbars-2';\nimport { List, ListItem } from '@mui/material';\n\nconst ContactList = () => {\n  const { contacts } = useContacts();\n  const { filter: name } = useContacts();\n  const filteredContacts = getFilteredContacts(name, contacts);\n\n  return filteredContacts.length === 0 ? (\n    <Natification title={name}></Natification>\n  ) : (\n    <Scrollbars autoHeight autoHeightMin={0} autoHeightMax={250}>\n      <List\n        sx={{\n          flexDirection: 'column',\n        }}\n      >\n        {filteredContacts.map(contact => (\n          <ListItem key={contact.id}>\n            <ContactItem contact={contact} />\n          </ListItem>\n        ))}\n      </List>\n    </Scrollbars>\n  );\n};\nexport default ContactList;\n","import { useDispatch } from 'react-redux';\nimport { changeFilter } from 'redux/contacts/filterSlice';\nimport { useContacts } from 'hooks/useContacts';\nimport { Box, TextField, Typography } from '@mui/material';\nimport { theme } from 'theme/theme';\n\nconst Filter = () => {\n  const dispatch = useDispatch();\n  const { filter: name } = useContacts();\n  const onchange = event => {\n    const { value } = event.target;\n    dispatch(changeFilter(value));\n  };\n  return (\n    <Box\n      p={2}\n      sx={{\n        display: 'flex',\n        alignItems: 'center',\n        flexDirection: 'column',\n        width: '100%',\n      }}\n    >\n      <Typography variant=\"h2\" color={theme.palette.primary.second}>\n        Find contacts by name\n      </Typography>\n      <TextField\n        id=\"filled-basic\"\n        label=\"Name\"\n        variant=\"filled\"\n        type=\"text\"\n        name=\"name\"\n        value={name}\n        onChange={onchange}\n        margin=\"normal\"\n        size=\"small\"\n      />\n    </Box>\n  );\n};\n\nexport default Filter;\n","import ContactForm from 'components/ContactForm';\nimport ContactList from 'components/ContactList';\nimport Filter from 'components/Filter';\nimport bgImg from '../images/bg-images/bg-contacts.jpg';\nimport { useEffect } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { fetchContacts } from 'redux/contacts/operation';\nimport Loader from 'components/Loader';\n\nimport { useContacts } from 'hooks/useContacts';\nimport { useAuth } from 'hooks';\nimport { Box, Container, Paper, Typography } from '@mui/material';\nimport { theme } from 'theme/theme';\n\nconst Contacts = () => {\n  const dispatch = useDispatch();\n  const { isLoading } = useContacts();\n  const { user } = useAuth();\n  useEffect(() => {\n    dispatch(fetchContacts());\n  }, [dispatch]);\n\n  return (\n    <Paper\n      sx={{\n        height: '100vh',\n        overflow: 'hidden',\n        overflowY: 'scroll',\n        backgroundImage: `url(${bgImg})`,\n        backgroundPosition: 'center',\n        backgroundSize: 'cover',\n        backgroundRepeat: 'no-repeat',\n      }}\n    >\n      <Container>\n        <Box\n          sx={{\n            pt: '70px',\n            pb: '20px',\n            height: 'auto',\n            display: 'flex',\n            alignItems: 'center',\n            flexDirection: 'column',\n          }}\n        >\n          <Typography\n            variant=\"h2\"\n            color={theme.palette.primary.second}\n            sx={{\n              fontSize: { xs: '20px', md: '30px', xl: '35px' },\n            }}\n          >\n            {`${user.name}, welcome to your phone book!`}\n          </Typography>\n          <ContactForm />\n          <Filter />\n          {isLoading ? <Loader /> : <ContactList />}\n        </Box>\n      </Container>\n    </Paper>\n  );\n};\n\nexport default Contacts;\n"],"names":["selectFilter","state","filter","selectContacts","contacts","items","selectIsLoading","isLoading","selectError","error","useContacts","useSelector","scima","yup","shape","name","min","max","matches","required","number","phone","dispatch","useDispatch","Box","p","sx","width","initialValues","validationSchema","onSubmit","values","resetForm","checkedContact","addedContact","normalazetName","toLowerCase","split","join","normalazetNumber","existingName","some","existingNumber","notify","checkContactBeforeAdding","addContact","props","display","alignItems","flexDirection","as","TextField","id","variant","label","type","color","fullWidth","helperText","errors","touched","margin","Button","Natification","title","Typography","prototype","PropTypes","Overlay","styled","Modal","modalRoot","document","querySelector","closeModal","children","useEffect","window","addEventListener","handleKeydown","removeEventListener","e","code","createPortal","onClick","target","currentTarget","contactValues","backgroundColor","theme","borderRadius","updateContact","fetchContacts","ContactItem","contact","useState","isModalOpen","setIsModalOpen","toggleModal","prevIsModalOpen","Paper","justifyContent","padding","xs","sm","gap","fontSize","md","xl","Tooltip","href","IconButton","deleteContact","RestoreFromTrash","ModeEditOutline","phonebook","isRequired","filteredContacts","normalizedName","includes","sort","firstContact","secondContact","localeCompare","getFilteredContacts","length","autoHeight","autoHeightMin","autoHeightMax","List","map","ListItem","value","onChange","event","changeFilter","size","user","useAuth","height","overflow","overflowY","backgroundImage","bgImg","backgroundPosition","backgroundSize","backgroundRepeat","Container","pt","pb","Loader"],"sourceRoot":""}